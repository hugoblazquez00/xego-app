"use client"
import { useState, useEffect } from "react"
import { X } from "lucide-react"
import { fetchAllXegos } from "@/app/utils/api"//TODO change a only purchased

const NewProjectModal = ({ onClose, onCreateProject, userId }) => {
  const [xegos, setXegos] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [selectedXego, setSelectedXego] = useState(null)
  const [projectName, setProjectName] = useState("")
  const [formError, setFormError] = useState("")

  useEffect(() => {
    const fetchXegoList = async () => {
      try {
        const xegoData = await fetchAllXegos();
        setXegos(xegoData);
      } catch (error) {
        console.error("Error fetching xegos:", error);
        setError("Failed to load available projects");
      } finally {
        setLoading(false);
      }
    };

    fetchXegoList();
  }, [])

  const handleSubmit = (e) => {
    e.preventDefault()

    if (!selectedXego) {
      setFormError("Please select a project template")
      return
    }

    if (!projectName.trim()) {
      setFormError("Please enter a project name")
      return
    }

    // Create new project
    const newProject = {
      _id: `proj_${Date.now()}`, // This would be generated by the backend
      name: projectName,
      iduser: userId,
      idxego: selectedXego._id,
      description: `Based on ${selectedXego.name}`,
      views: 0,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    }

    onCreateProject(newProject)
  }

  const difficultyColors = {
    Easy: "bg-green-100 text-green-800 border-green-200",
    Intermediate: "bg-yellow-100 text-yellow-800 border-yellow-200",
    Hard: "bg-red-100 text-red-800 border-red-200",
  }

  const categoryColors = {
    Frontend: "bg-blue-100 text-blue-800 border-blue-200",
    Backend: "bg-purple-100 text-purple-800 border-purple-200",
    Database: "bg-orange-100 text-orange-800 border-orange-200",
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg w-full max-w-3xl max-h-[90vh] overflow-hidden flex flex-col">
        {/* Header */}
        <div className="flex justify-between items-center p-6 border-b border-gray-200">
          <h2 className="text-xl font-bold text-gray-900">Start project</h2>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <X className="h-5 w-5" />
          </button>
        </div>

        {/* Content */}
        <div className="flex-grow overflow-y-auto p-6">
          {loading ? (
            <div className="flex justify-center items-center h-40">
              <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-[#275eff]"></div>
            </div>
          ) : error ? (
            <div className="text-red-500 text-center p-4">{error}</div>
          ) : (
            <form onSubmit={handleSubmit}>
              {/* Project Name Input */}
              <div className="mb-6">
                <label htmlFor="projectName" className="block text-sm font-medium text-gray-700 mb-1">
                  Project name
                </label>
                <input
                  type="text"
                  id="projectName"
                  value={projectName}
                  onChange={(e) => setProjectName(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#275eff] focus:border-transparent"
                  placeholder="New project..."
                />
              </div>

              {/* Available Xegos */}
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">Select template:</h3>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {xegos.map((xego) => (
                    <div
                      key={xego._id}
                      onClick={() => setSelectedXego(xego)}
                      className={`border rounded-lg p-4 cursor-pointer transition-colors ${
                        selectedXego?._id === xego._id
                          ? "border-[#275eff] bg-blue-50"
                          : "border-gray-200 hover:border-gray-300"
                      }`}
                    >
                      <div className="flex justify-between mb-2">
                        <span
                          className={`px-2 py-1 rounded-full text-xs font-medium border ${difficultyColors[xego.difficulty]}`}
                        >
                          {xego.difficulty}
                        </span>
                        <span
                          className={`px-2 py-1 rounded-full text-xs font-medium border ${categoryColors[xego.category]}`}
                        >
                          {xego.category}
                        </span>
                      </div>


                      <h4 className="font-medium text-gray-900 mb-2">{xego.title}</h4>

                      <p className="text-sm text-gray-600 mb-2 line-clamp-2">{xego.description}</p>

                      <div className="flex flex-wrap gap-1">
                        {xego.technologies.map((tech, index) => (
                          <span key={index} className="px-2 py-0.5 bg-gray-100 text-gray-700 rounded-full text-xs">
                            {tech}
                          </span>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {formError && <div className="mt-4 text-red-500 text-sm">{formError}</div>}
            </form>
          )}
        </div>

        {/* Footer */}
        <div className="p-6 border-t border-gray-200 flex justify-end">
          <button
            onClick={onClose}
            className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 mr-2 hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            onClick={handleSubmit}
            className="px-4 py-2 bg-[#275eff] text-white rounded-md hover:bg-[#1e4cd1] focus:outline-none focus:ring-2 focus:ring-[#275eff] focus:ring-offset-2"
          >
            Create Project
          </button>
        </div>
      </div>
    </div>
  )
}

export default NewProjectModal
